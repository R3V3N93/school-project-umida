struct StageInfo
{
    Vector3 cutscene_boat_location;
    Array<string> trash_picker;
};

class Handler : EventHandler
{
    DebugInfo debug;
    // used to manipulate codes easily
    string command;
    //01
    //23
    Vector3 screenBorder[4];
    Harpoon mouse;

    GameScene scene;
    // different boat which is used for navigating in the stage screen
    Actor mapBoat;
    // destination of mapBoat
    Actor destination;
    StageInfo _stageinfo[4];

    string playername;
    bool nameDone;

    playerinfo p;

    Array<string> trash_picker;
    Array<Trash> trashes;

    double screenXLeft;
    double screenXRight;
    double screenYUp;
    double screenYDown;

    int gamestate;
    int stage;
    int timer; // tic
    int spawngap; // tic
    int score;
    int combo;
    int combotimer; // tic
    double health;
    int credit;

    string image;

    enum game_state
    {
        GAMESTATE_TUTORIAL,
        GAMESTATE_PREGAME,
        GAMESTATE_INGAME,
        GAMESTATE_POSTGAME,
        GAMESTATE_END,
        GAMESTATE_POSTEND,
        GAMESTATE_GAMEOVER
    };

    void setGameState(int state)
    {
        if(state < GAMESTATE_TUTORIAL || GAMESTATE_GAMEOVER < state)
        {
            debug.LogError(self.GetClassName()..".setGameState() : Unknown gamestate "..state);
            return;
        }
        gamestate = state;
        debug.LogDebug(self.GetClassName()..".setGameState() : gamestate changed to "..gamestate);
    }

    enum CAMERASTATE
    {
        CAMERA_GAME,
        CAMERA_STAGE
    };

    void setCamera(CAMERASTATE yes)
    {
        switch(yes)
        {
            case CAMERA_GAME:
                p.mo.SetOrigin((0, 0, 500), false);
                p.mo.Pitch = 90;
                p.mo.angle = 90;
                break;
            case CAMERA_STAGE:
                p.mo.SetOrigin((mapBoat.pos.x, mapBoat.pos.y, 300), true);
                p.mo.Pitch = 45;
                p.mo.angle = mapBoat.angle;
        }
    }

    void prepareStageCutscene(Vector3 dest)
    {
        if(destination)
        {
            destination.SetOrigin(dest, false);
            debug.LogDebug(self.GetClassName()..".prepareStageCutscene() : Changed destination : "..destination.pos);
        }
    }
    
    // initial distance is given to let the function know the proper constant (g)
    void proceedToDest(double initdist)
    {
        double g = initdist / 175.0;
        Vector3 d = mapBoat.pos + (g*sin(mapBoat.angle + 90), -g*cos(mapBoat.angle + 90), 0);
        mapBoat.SetOrigin(d, true);
        return;
    }

    override void PlayerSpawned(PlayerEvent e)
    {
        if(Level.Mapname == "TEST")
            return;

        playerinfo p = players[e.PlayerNumber];
		p.cheats |= CF_TOTALLYFROZEN;
        self.p = p;

        scene = GameScene(Actor.Spawn("GameScene", (0, 0, -10)));
        mapBoat = Actor.Spawn("AllWeHadToDoWasToFollowTheDamnBoatCJ", (2149, 1415, 0));
        destination = Actor.Spawn("YouHaveArrivedAtYourDestination", (2149, 1415, 0));

        setCamera(CAMERA_GAME);
    }

    void setSpawngap()
    {
        spawngap = random(10, 70);
        return;
    }

    void damagePlayer()
    {
        self.health -= Cvar.GetCVar("sv_health_max").GetFloat() / 4.0;
    }

    void healplayer(double health)
    {
        self.health += health;
    }
    
    void grantScore(int selftimer, int givenscore)
    {
        self.score += givenscore * (1 + log(combo + 1)); // multiply a coefficient if needed
        return;
    }

    void doCombo()
    {
        combotimer = 0;
        combo++;
    }

    void stopCombo()
    {
        combotimer = 0;
        combo = 0;
    }

    void stageSetup(StageInfo &stage, vector3 cutscene_boat_location, int vinyl = 0, int bottle = 0, int chemical = 0)
    {
        stage.cutscene_boat_location = cutscene_boat_location;
        for(int i = 0; i < vinyl; i++)
            stage.trash_picker.push("vinyl");
        for(int i = 0; i < bottle; i++)
            stage.trash_picker.push("PlasticBottle");
        for(int i = 0; i < chemical; i++)
            stage.trash_picker.push("Chemical");
    }

    override void OnRegister () 
	{
        debug = DebugInfo(Eventhandler.Find("Debuginfo"));
        setSpawngap();
        self.health = Cvar.FindCVar("sv_health_max").GetFloat(); 
        self.credit = Cvar.FindCVar("umida_credit").GetInt(); 

        // Stage setups
        stageSetup(_stageinfo[0], cutscene_boat_location: (3399, -706, 0), vinyl : 1);
        stageSetup(_stageinfo[1], cutscene_boat_location: (5310, 1110, 0), vinyl : 3, bottle : 2);
        stageSetup(_stageinfo[2], cutscene_boat_location: (3366, -476, 0), vinyl : 2, bottle : 3, chemical : 1);
        stageSetup(_stageinfo[3], cutscene_boat_location: (4914, 819, 0), vinyl : 1, bottle : 3, chemical : 2);
	}

    override void NetworkProcess(ConsoleEvent e)
    {
        Array<String> args;
        e.name.split(args, "|");
        
        if(args[0] == "playername")
        {
            debug.LogDebug(self.GetClassName().." : Input character : "..args[1]);
            if(args[1] == "backspace")
            {
                self.playername.DeleteLastCharacter();
            }
            else if(args[1] == "enter")
            {
                self.nameDone = true;
            }
            else
                self.playername.AppendFormat(args[1]);
        }

        if(args[0] == "command")
        {
            self.command = args[1];
        }

        // DEBUG CHEATS
        // Until this dumb mf(r3v) finds out how to implement proper 'console commands'
        // make sure to use them along with 'netevent'

        if(args[0] == "umida_timer")
        {
            debug.LogDebug("CheatManager.umida_timer : Cheat used");
            self.timer = e.args[0];
        }

        if(args[0] == "umida_resetCvar")
        {
            debug.LogDebug("CheatManager.umida_resetCvar : Cheat used");
            Cvar.GetCvar("umida_score", players[0]).SetString("");
        }


        if(args[0] == "umida_point")
        {
            debug.LogDebug("CheatManager.umida_score : Cheat used");
            self.score = e.args[0];
        }

        if(args[0] == "umida_stage")
        {
            debug.LogDebug("CheatManager.umida_stage : Cheat used");
            if(e.args[0] <= 3 || e.args[0] >= 0)
            {
                self.stage = e.args[0];
                self.timer = 0; // Clears the timer to ensure the player jumps into the stage
            }
            else
                debug.LogWarning("CheatManager.umida_stage : Invalid stage value! Such value should be 0~4");
        }
    }

    ui TrashGauge getTrashGauge(Trash trsh)
    {
        if(trsh.gauge < trsh.default.gauge)
        {
            TrashGauge temp = TrashGauge(new('TrashGauge'));
                
            temp.cur = trsh.gauge;
            temp.max = trsh.default.gauge;

            Vector2 finalLocationForGauge;
            if(mouse)
            {
                mouse.proj.ProjectWorldPos((trsh.pos.x, trsh.pos.y, trsh.pos.z));
                finalLocationForGauge = mouse.proj.ProjectToScreen();
            }
            
            temp.x = finalLocationForGauge.x;
            temp.y = finalLocationForGauge.y;

            return temp;
        }
        return null;
    }

    override void WorldTick()
    {
        mouse = Harpoon(Eventhandler.Find("Harpoon"));
        debug.AddMInfoItem(self.GetClassName().." : Screen left top = "..screenBorder[0]);
        debug.AddMInfoItem(self.GetClassName().." : Screen Right top = "..screenBorder[1]);
        debug.AddMInfoItem(self.GetClassName().." : Screen left bottom = "..screenBorder[2]);
        debug.AddMInfoItem(self.GetClassName().." : Screen right bottom = "..screenBorder[3]);
        screenXLeft = screenBorder[0].x;
        screenXRight = screenBorder[3].x;
        screenYUp = screenBorder[0].y;
        screenYDown = screenBorder[3].y;

        if(self.health <= 0)
        {
            if(credit <= 0 && gamestate != GAMESTATE_GAMEOVER)
            {
                setGameState(GAMESTATE_GAMEOVER);
                scene.SetStateLabel("GameOver");
            }
            else if(gamestate != GAMESTATE_GAMEOVER)
            {
                debug.LogDebug(self.GetClassName().." : Player dead! using a coin");
                self.HealPlayer(Cvar.GetCVar("sv_health_max").GetFloat());
                credit--;
            }
        }
    }

    ui void UIsetCommand(string what)
    {
        SendNetworkEvent(String.Format("command|%s", what)); 
    }

    override void RenderOverlay(RenderEvent e)
    {
        if(image != "")
            Screen.DrawTexture(Texman.CheckForTexture(image), true, 0, 0, DTA_VirtualWidth, 1920, DTA_VirtualHeight, 1080);
        if(command == "carve_your_name_onto_your_grave")
        {
            displayPlayerName();
            UIsetCommand("");
        }

        if(gamestate == GAMESTATE_GAMEOVER)
        {
            Screen.DrawText(BIGFONT, Font.CR_WHITE, 120.0 - BIGFONT.StringWidth("GAME OVER") / 2.0, 67.5 - BIGFONT.GetHeight() / 2, "GAME OVER", DTA_VirtualWidth, 240, DTA_VirtualHeight, 135);
        }
    }

    ui void displayPlayerName()
    {
        debug.AddMInfoItem(self.GetClassName().." : Awaiting playername input");
        Screen.DrawText(BIGFONT, Font.CR_WHITE, 120.0 - BIGFONT.StringWidth("Type your name(3 letters)") / 2.0, 67.5 - BIGFONT.GetHeight() / 4, "Type your name(3 letters)", DTA_VirtualWidth, 240, DTA_VirtualHeight, 135);
        Screen.DrawText(BIGFONT, Font.CR_WHITE, 120.0 - BIGFONT.StringWidth(playername) / 2.0, 67.5 - BIGFONT.GetHeight() / 2, playername, DTA_VirtualWidth, 240, DTA_VirtualHeight, 135);
    }

    void setImage(string img)
    {
        self.image = img;
    }

    void clearImage()
    {
        self.image = "";
    }   

    override bool InputProcess (InputEvent e)
    {
        // Skipping pregame sequence
        if(gamestate == GAMESTATE_PREGAME && e.Type == e.Type_KeyDown)
        {
            UISetCommand("skip_pregame_pls"); 
        }

        if(Level.Mapname == "TEST" && e.Type == e.Type_KeyDown)
        {
            //            numbers                                  big alphabets                              small alphabets
            if((48 <= e.KeyChar && e.KeyChar <= 57) || (65 <= e.KeyChar && e.KeyChar <= 90) || (97 <= e.KeyChar && e.KeyChar <= 122))
                debug.LogDebug(self.GetClassName().." : Key pressed : "..string.format("%c", e.KeyChar).."\nReal ASCII : "..e.KeyChar);
        }

        if(gamestate == GAMESTATE_END && e.Type == e.Type_KeyDown)
        {
            if(self.playername.length() < 3)
            {   
                //            numbers                                  big alphabets                              small alphabets
                if((48 <= e.KeyChar && e.KeyChar <= 57) || (65 <= e.KeyChar && e.KeyChar <= 90) || (97 <= e.KeyChar && e.KeyChar <= 122))
                    SendNetworkEvent(String.Format("playername|%s", string.format("%c", e.KeyChar)));       
            }

            if(e.Keychar == 13) // ENTER
            {
                if(playername.Length() > 0)
                {
                    debug.LogDebug(self.GetClassName().." : Enter");
                    SendNetworkEvent(String.Format("playername|enter"));  
                }
            } 
            if(e.KeyChar == 8) // BACKSPACE
            {
                debug.LogDebug(self.GetClassName().." : Backspace");
                SendNetworkEvent("playername|backspace"); 
            }

        }
        return false;
    }

    void FadeOut(int tics)
    {
        p.mo.A_SetBlend("00 00 00", 1.0, tics, "00 00 00", 0.0);
    }

    void FadeIn(int tics)
    {
        p.mo.A_SetBlend("00 00 00", 0.0, tics, "00 00 00", 1.0);
    }

    void Fade(int tics)
    {
        game.p.mo.A_SetBlend("00 00 00", 1.0, tics, "00 00 00", 1.0);
    }

    void playMus()
    {
        S_ChangeMusic("DEATHRUN");
    }

    void clearMus()
    {
        S_ChangeMusic("");
    }
}

class PlayerScore play
{
    string name;
    int score;
}

class GameScene : Actor
{
    DebugInfo debug;
    Harpoon mouse;
    Handler game;
    playerinfo p;
    int tempdist;

    enum game_state
    {
        GAMESTATE_TUTORIAL,
        GAMESTATE_PREGAME,
        GAMESTATE_INGAME,
        GAMESTATE_POSTGAME,
        GAMESTATE_END,
        GAMESTATE_POSTEND,
        GAMESTATE_GAMEOVER
    };

    enum CAMERASTATE
    {
        CAMERA_GAME,
        CAMERA_STAGE
    };

    override void PostBeginPlay()
    {
        game = Handler(EventHandler.Find("Handler"));
        mouse = game.mouse;
        p = game.p;
        debug = game.debug;
    }

    string pickRandomTrashFromPicker()
    {
        int index = random(0, game.trash_picker.size()-1);
        string temp = game.trash_picker[index];
        game.trash_picker.delete(index);
        return temp;
    }

    States
    {
        Spawn:
        Tutorial:
            TNT1 A 0
            {
                game.setGameState(GAMESTATE_TUTORIAL);    
                //game.setImage("graphics/TUTORIAL.png");
            }
        StagePre:
            TNT1 A 35
            {
                game.FadeIn(36);
            }
            TNT1 A 0
            {
                game.FadeOut(105);
                debug.LogDebug(self.GetClassName().." : Entered state : ".."StagePre");
                game.setGameState(GAMESTATE_PREGAME);
                game.prepareStageCutscene(game._stageinfo[game.stage].cutscene_boat_location);
                game.mapboat.angle = atan2(game.destination.pos.y - game.mapBoat.pos.y, game.destination.pos.x - game.mapBoat.pos.x);
                tempdist = game.mapBoat.Distance2D(game.destination);
            }
            // 35 * 5 'A's
            TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1
            {
                game.setCamera(CAMERA_STAGE);
                game.proceedToDest(tempdist);
                game.timer = 35 * 60;
                if(game.command == "skip_pregame_pls")
                {
                    game.command = "";
                    game.mapboat.SetOrigin(game._stageinfo[game.stage].cutscene_boat_location, false);
                    return ResolveState("StageLoop");
                }
                return state(null);
            }
        StageLoop:
            TNT1 A 35
            {
                game.FadeIn(36);
            }
            TNT1 A 35
            {
                game.setCamera(CAMERA_GAME);
                game.FadeOut(35);
                game.setGameState(GAMESTATE_INGAME);
                game.PlayMus();  
            }
        StageActualLoop:
            TNT1 A 1
            {
                
                debug.AddMInfoItem(self.GetClassName().." : game.spawngap = "..game.spawngap);
                debug.AddMInfoItem(self.GetClassName()..".game.trashes.size() = "..game.trashes.size());
                game.spawngap--;
                if(game.spawngap <= 0)
                {   
                    // resets the array
                    if(game.trash_picker.size() == 0)
                    {
                        for(int i = 0; i < game._stageinfo[game.stage].trash_picker.size(); i++)
                        {
                            game.trash_picker.push(game._stageinfo[game.stage].trash_picker[i]);
                        }
                    }
                    Actor r3v3n93innutshell = actor.Spawn(pickRandomTrashFromPicker(), (game.screenXRight - 100.0, random(-game.screenYDown * 1/2, game.screenYDown), game.screenborder[3].z));
                    
                    if(!r3v3n93innutshell)
                        debug.LogError(self.GetClassName().." : Trash not spawned!");

                    Trash(r3v3n93innutshell).accel();
                    Trash(r3v3n93innutshell).game = self.game;
                    game.trashes.push(Trash(r3v3n93innutshell));
                    game.setSpawngap();
                }

                if(game.combo > 0) 
                {
                    game.combotimer++;
                    debug.AddMInfoItem(self.GetClassName().." : Combo Timer = "..game.combotimer);
                    if(game.combotimer >= 105)
                    {
                        game.stopCombo();
                    }
                }
                game.timer--;
            }
            TNT1 A 0
            {
                if(game.timer > 0)
                    return ResolveState("StageActualLoop");
                return ResolveState("StagePost");
            }
        StagePost:
            TNT1 A 1
            {
                debug.LogDebug(self.GetClassName().." : Entered state : ".."StagePost");
                game.clearMus();
                game.setGameState(GAMESTATE_POSTGAME);
                foreach(things : game.trashes)
                {
                    if(things)
                        things.destroy();
                }
                game.stage++;
                if(game.stage < 4)
                {   
                    return ResolveState("StagePre");
                }
                
                return ResolveState("Ending");
            }
        Ending:
            TNT1 A 35
            {   
                game.FadeIn(36);
                game.setGameState(GAMESTATE_END);
            }
        Ending.typeurname:
            TNT1 A 1
            {
                game.Fade(2);
                game.command = "carve_your_name_onto_your_grave";
            }
            TNT1 A 0
            {
                if(!game.nameDone)
                    return ResolveState("Ending.typeurname");
                
                debug.LogDebug(self.GetClassName().." : player name input complete");

                PlayerScore curplayer = PlayerScore(new("PlayerScore"));
                curplayer.name = game.playername;
                curplayer.score = game.score;

                CVar scorecvar = Cvar.FindCvar("umida_score");
                string score = scorecvar.GetString();
                Array<string> scoreData;
                score.split(scoreData, "|");

                Array<PlayerScore> scoreboard;
                for(int i = 0; i < 10; i++)
                {
                    PlayerScore temp1 = PlayerScore(new("PlayerScore"));
                    if(i >= scoreData.size())
                    {
                        temp1.score = 0;
                        temp1.name = "";
                    }
                    else
                    {
                        Array<string> temp;
                        scoreData[i].split(temp, "/");
                    
                        temp1.name = temp[0];
                        temp1.score = temp[1].ToInt();
                    }
                    scoreBoard.push(temp1);
                }

                string debugscore;
                for(int i = 0; i < 10; i++)
                {
                    debugscore.AppendFormat("%s/%d%s", scoreboard[i].name, scoreboard[i].score, (i != 9 ? "|" : ""));
                }

                debug.LogDebug(self.GetClassName().." : scoreBoard array : "..debugscore);

                // Sort
                if(min(scoreBoard[9].score, curplayer.score) != curplayer.score) // if current score is above the lowest score
                {
                    // Normally I'd have to write an algorithm to quickly sort it right,
                    // but I'm out of time and only 10 loops shouldn't be a problem
                    
                    for(int i = 0; i < 10; i++)
                    {
                        if(max(curplayer.score, scoreboard[i].score) == curplayer.score)
                        {
                            debug.LogDebug(self.GetClassName().." : current player's score is at "..i.."th place");
                            for(int j = 9; j >= i; j--) //pushing back
                            {
                                if(j != 9)
                                    scoreboard[j+1] = scoreboard[j];
                            }
                            scoreboard[i] = curplayer;
                            break;
                        }
                    }

                }

                string finalscore;

                for(int i = 0; i < 10; i++)
                {
                    finalscore.AppendFormat("%s/%d%s", scoreboard[i].name, scoreboard[i].score, (i != 9 ? "|" : ""));
                }
                scorecvar.SetString(finalscore);

                debug.LogDebug(self.GetClassName().." : final score cvar : "..finalscore);
                S_ChangeMusic("THOTDCLR");
                return state(null);
            }
        PostEnding:
            TNT1 A 1
            {
                
                //game.SetImage()
            }
            Loop;
        GameOver:
            TNT1 A 105
            {
                game.FadeIn(105);
            }
            TNT1 A 175
            {
                game.Fade(175);
                game.setGameState(GAMESTATE_GAMEOVER);
            }
            TNT1 A 1
            {
                Level.ChangeLevel("MAP01", 0, CHANGELEVEL_NOINTERMISSION);
            }
    }
}