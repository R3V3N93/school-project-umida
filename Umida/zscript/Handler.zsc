class Handler : EventHandler
{
    DebugInfo debug;
    //01
    //23
    Vector3 screenBorder[4];
    Harpoon mouse;

    Playerinfo player;

    Array<Trash> trashes;

    double screenXLeft;
    double screenXRight;
    double screenYUp;
    double screenYDown;

    int gamestate;
    int stage;
    int timer; // tic
    int spawngap; // tic
    int score;
    int combo;
    int combotimer; // tic
    double health;

    string image;

    enum GAMESTATE
    {
        GAMESTATE_PREGAME,
        GAMESTATE_INGAME,
        GAMESTATE_POSTGAME,
        GAMESTATE_END
    };

    void setGameState(int state)
    {
        if(state < GAMESTATE_PREGAME || GAMESTATE_END < state)
        {
            debug.LogError(self.GetClassName()..".setGameState() : Unknown gamestate "..state);
            return;
        }
        gamestate = state;
        debug.LogError(self.GetClassName()..".setGameState() : Unknown gamestate "..state);
    }

    override void PlayerSpawned(PlayerEvent e)
    {
        if(Level.Mapname == "TEST")
            return;
        Playerinfo p = players[e.PlayerNumber];
        p.mo.SetOrigin(p.mo.pos + (0, 0, 500), false);
		p.cheats |= CF_TOTALLYFROZEN;
		p.mo.Pitch = 90;
        self.player = p;
    }

    void setSpawngap()
    {
        spawngap = random(10, 70);
        return;
    }

    void damagePlayer()
    {
        self.health -= Cvar.GetCVar("sv_health_max").GetFloat() / 4.0;
    }

    void healPlayer(double health)
    {
        self.health += health;
    }
    
    void grantScore(int selftimer, int givenscore)
    {
        self.score += (givenscore - 23 * log10(selftimer-9)); // needs to be revised!
        return;
    }

    void doCombo()
    {
        combotimer = 0;
        combo++;
    }

    void stopCombo()
    {
        combotimer = 0;
        combo = 0;
    }

    override void OnRegister () 
	{
        debug = DebugInfo(Eventhandler.Find("Debuginfo"));
        setSpawngap();
        self.health = Cvar.GetCVar("sv_health_max").GetFloat();
        
	}

    override void InterfaceProcess(ConsoleEvent e)
    {
        Array<String> args;
        e.name.split(args, "|");
        
        if(args[0] == "Trash")
        {
            
        }
    }

    ui TrashGauge getTrashGauge(Trash trsh)
    {
        if(trsh.gauge < trsh.default.gauge)
        {
            TrashGauge temp = TrashGauge(new('TrashGauge'));
                
            temp.cur = trsh.gauge;
            temp.max = trsh.default.gauge;

            Vector2 finalLocationForGauge;
            if(mouse)
            {
                mouse.proj.ProjectWorldPos((trsh.pos.x, trsh.pos.y, trsh.pos.z));
                finalLocationForGauge = mouse.proj.ProjectToScreen();
            }
            //debug.AddMInfoItem(self.GetClassName()..".getTrashGauge().finalLocationForGauge : "..finalLocationForGauge, "handler.getTrashGauge.finalloc");
            temp.x = finalLocationForGauge.x;
            temp.y = finalLocationForGauge.y;

            return temp;
        }
        return null;
    }

    override void WorldTick()
    {
        mouse = Harpoon(Eventhandler.Find("Harpoon"));
        debug.AddMInfoItem(self.GetClassName().." : Screen left top = "..screenBorder[0]);
        debug.AddMInfoItem(self.GetClassName().." : Screen Right top = "..screenBorder[1]);
        debug.AddMInfoItem(self.GetClassName().." : Screen left bottom = "..screenBorder[2]);
        debug.AddMInfoItem(self.GetClassName().." : Screen right bottom = "..screenBorder[3]);
        screenXLeft = screenBorder[0].x;
        screenXRight = screenBorder[3].x;
        screenYUp = screenBorder[0].y;
        screenYDown = screenBorder[3].y;

        debug.AddMInfoItem(self.GetClassName().." : spawngap = "..spawngap);
        debug.AddMInfoItem(self.GetClassName()..".trashes.size() = "..trashes.size());
        spawngap--;
        if(spawngap <= 0)
        {   
            Actor r3v3n93innutshell = actor.Spawn("Trash", (screenXRight - 100.0, random(-screenYDown * 1/2, screenYDown), screenborder[3].z));
            if(!r3v3n93innutshell)
                debug.LogError(self.GetClassName().." : Trash not spawned!");
            Trash(r3v3n93innutshell).accel();
            Trash(r3v3n93innutshell).game = self;
            trashes.push(Trash(r3v3n93innutshell));
            setSpawngap();
        }

        if(combo > 0) 
        {
            combotimer++;
            debug.AddMInfoItem(self.GetClassName().." : Combo Timer = "..combotimer);
            if(combotimer >= 105)
            {
                stopCombo();
            }
        }
    }

    override void RenderOverlay(RenderEvent e)
    {
        switch(gamestate)
        {
            case GAMESTATE_PREGAME:
            case GAMESTATE_INGAME:
            case GAMESTATE_POSTGAME:
            case GAMESTATE_END:
        }
    }

    void Game()
    {
        Delayer delay = Delayer(new("Delayer"));
        setGameState(GAMESTATE_PREGAME);    
    }
}