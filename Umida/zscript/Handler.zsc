class Handler : EventHandler
{
    DebugInfo debug;
    //01
    //23
    Vector3 screenBorder[4];
    Harpoon mouse;

    GameScene scene;
    // different boat which is used for navigating in the stage screen
    Actor mapBoat;
    // destination of mapBoat
    Actor destination;

    Playerinfo player;

    Array<Trash> trashes;

    double screenXLeft;
    double screenXRight;
    double screenYUp;
    double screenYDown;

    int gamestate;
    int stage;
    int timer; // tic
    int spawngap; // tic
    int score;
    int combo;
    int combotimer; // tic
    double health;

    string image;

    enum game_state
    {
        GAMESTATE_TUTORIAL,
        GAMESTATE_PREGAME,
        GAMESTATE_INGAME,
        GAMESTATE_POSTGAME,
        GAMESTATE_END
    };

    void setGameState(int state)
    {
        if(state < GAMESTATE_PREGAME || GAMESTATE_END < state)
        {
            debug.LogError(self.GetClassName()..".setGameState() : Unknown gamestate "..state);
            return;
        }
        gamestate = state;
        debug.LogDebug(self.GetClassName()..".setGameState() : gamestate changed to "..gamestate);
    }

    enum CAMERASTATE
    {
        CAMERA_GAME,
        CAMERA_STAGE
    };

    void setCamera(CAMERASTATE yes)
    {
        switch(yes)
        {
            case CAMERA_GAME:
                player.mo.SetOrigin((0, 0, 500), false);
                player.mo.Pitch = 90;
                break;
            case CAMERA_STAGE:
                player.mo.SetOrigin((mapBoat.pos.x, mapBoat.pos.y, 300), true);
                player.mo.Pitch = 45;
                player.mo.angle = mapBoat.angle;
                break;
        }
    }

    void prepareStageCutscene(Vector3 dest)
    {
        if(destination)
        {
            destination.SetOrigin(dest, false);
            debug.LogDebug(self.GetClassName()..".prepareStageCutscene() : Changed destination : "..destination.pos);
        }
    }
    
    // initial distance is given to let the function know the proper constant (g)
    void proceedToDest(int initdist)
    {
        int g = initdist / 175;
        Vector3 d = mapBoat.pos + (g*sin(mapBoat.angle), -g*cos(mapBoat.angle), 0);
        mapBoat.SetOrigin(d, true);
        return;
    }

    override void PlayerSpawned(PlayerEvent e)
    {
        if(Level.Mapname == "TEST")
            return;
        Playerinfo p = players[e.PlayerNumber];
		p.cheats |= CF_TOTALLYFROZEN;
        self.player = p;

        setCamera(CAMERA_GAME);
        scene = GameScene(Actor.Spawn("GameScene", (0, 0, -10)));
        mapBoat = Actor.Spawn("AllWeHadToDoWasToFollowTheDamnBoatCJ", (2149, 1415, 0));
        destination = Actor.Spawn("YouHaveArrivedAtYourDestination", (2149, 1415, -10));
    }

    void setSpawngap()
    {
        spawngap = random(10, 70);
        return;
    }

    void damagePlayer()
    {
        self.health -= Cvar.GetCVar("sv_health_max").GetFloat() / 4.0;
    }

    void healPlayer(double health)
    {
        self.health += health;
    }
    
    void grantScore(int selftimer, int givenscore)
    {
        self.score += (givenscore - 23 * log10(selftimer-9)); // needs to be revised!
        return;
    }

    void doCombo()
    {
        combotimer = 0;
        combo++;
    }

    void stopCombo()
    {
        combotimer = 0;
        combo = 0;
    }

    override void OnRegister () 
	{
        debug = DebugInfo(Eventhandler.Find("Debuginfo"));
        setSpawngap();
        self.health = Cvar.GetCVar("sv_health_max").GetFloat();
	}

    override void InterfaceProcess(ConsoleEvent e)
    {
        Array<String> args;
        e.name.split(args, "|");
        
        if(args[0] == "Trash")
        {
            
        }
    }

    ui TrashGauge getTrashGauge(Trash trsh)
    {
        if(trsh.gauge < trsh.default.gauge)
        {
            TrashGauge temp = TrashGauge(new('TrashGauge'));
                
            temp.cur = trsh.gauge;
            temp.max = trsh.default.gauge;

            Vector2 finalLocationForGauge;
            if(mouse)
            {
                mouse.proj.ProjectWorldPos((trsh.pos.x, trsh.pos.y, trsh.pos.z));
                finalLocationForGauge = mouse.proj.ProjectToScreen();
            }
            
            temp.x = finalLocationForGauge.x;
            temp.y = finalLocationForGauge.y;

            return temp;
        }
        return null;
    }

    override void WorldTick()
    {
        mouse = Harpoon(Eventhandler.Find("Harpoon"));
        debug.AddMInfoItem(self.GetClassName().." : Screen left top = "..screenBorder[0]);
        debug.AddMInfoItem(self.GetClassName().." : Screen Right top = "..screenBorder[1]);
        debug.AddMInfoItem(self.GetClassName().." : Screen left bottom = "..screenBorder[2]);
        debug.AddMInfoItem(self.GetClassName().." : Screen right bottom = "..screenBorder[3]);
        screenXLeft = screenBorder[0].x;
        screenXRight = screenBorder[3].x;
        screenYUp = screenBorder[0].y;
        screenYDown = screenBorder[3].y;

        if(gamestate == GAMESTATE_INGAME)
        {
            debug.AddMInfoItem(self.GetClassName().." : spawngap = "..spawngap);
            debug.AddMInfoItem(self.GetClassName()..".trashes.size() = "..trashes.size());
            spawngap--;
            if(spawngap <= 0)
            {   
                Actor r3v3n93innutshell = actor.Spawn("Trash", (screenXRight - 100.0, random(-screenYDown * 1/2, screenYDown), screenborder[3].z));
                if(!r3v3n93innutshell)
                    debug.LogError(self.GetClassName().." : Trash not spawned!");
                Trash(r3v3n93innutshell).accel();
                Trash(r3v3n93innutshell).game = self;
                trashes.push(Trash(r3v3n93innutshell));
                setSpawngap();
            }

            if(combo > 0) 
            {
                combotimer++;
                debug.AddMInfoItem(self.GetClassName().." : Combo Timer = "..combotimer);
                if(combotimer >= 105)
                {
                    stopCombo();
                }
            }
        }   
    }

    override void RenderOverlay(RenderEvent e)
    {
        if(image != "")
            Screen.DrawTexture(Texman.CheckForTexture(image), true, 0, 0, DTA_VirtualWidth, 1920, DTA_VirtualHeight, 1080);
        switch(gamestate)
        {
            case GAMESTATE_PREGAME:
            case GAMESTATE_INGAME:
            case GAMESTATE_POSTGAME:
            case GAMESTATE_END:
        }
    }

    void setImage(string img)
    {
        self.image = img;
    }

    void clearImage()
    {
        self.image = "";
    }
}

class GameScene : Actor
{
    DebugInfo debug;
    Harpoon mouse;
    Handler game;
    Playerinfo player;
    int tempdist;

    enum game_state
    {
        GAMESTATE_TUTORIAL,
        GAMESTATE_PREGAME,
        GAMESTATE_INGAME,
        GAMESTATE_POSTGAME,
        GAMESTATE_END
    };

    enum CAMERASTATE
    {
        CAMERA_GAME,
        CAMERA_STAGE
    };

    override void PostBeginPlay()
    {
        game = Handler(EventHandler.Find("Handler"));
        mouse = game.mouse;
        player = game.player;
        debug = game.debug;
    }
    States
    {
        Spawn:
        Tutorial:
            TNT1 A 0
            {
                game.setGameState(GAMESTATE_TUTORIAL);    
                game.setImage("graphics/TUTORIAL.png");
            }
            TNT1 A 35;
        Stage1Pre:
            TNT1 A 0
            {
                game.clearImage();
                game.setGameState(GAMESTATE_PREGAME);
                game.prepareStageCutscene((3399, -706, 0));
                tempdist = game.mapBoat.Distance2D(game.destination);
                game.mapboat.angle = atan2(game.destination.x - game.mapBoat.x, game.destination.y - game.mapBoat.y);
            }
            // 35 * 5 'A's
            TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1
            {
                game.setCamera(CAMERA_STAGE);
                game.proceedToDest(tempdist);
            }
    }
}