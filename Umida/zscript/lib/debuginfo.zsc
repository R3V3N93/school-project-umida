Class Debuginfo : EventHandler
{
    //SETUP
    //Debuginfo debug;
    //debug = Debuginfo(EventHandler.Find("Debuginfo"));
    mixin SCCommonUIVar;
    protected ui Array<string> p_info;
    protected ui Array<string> m_info;
    protected ui Array<string> p_info_tag;
    protected ui Array<string> m_info_tag;

    protected UmidaPlayer p;
    protected Playerinfo pinfo;

    protected font consolefont;

    enum BasicInfo
    {
        CONST_TEXT_H = 12,
        CONST_TEXT_GAP_FROM_LOG = 80
    };

    override void OnRegister()
    { 
        consolefont = Font.GetFont("calibri");  
    }
    override void WorldTick()
    {
        p = UmidaPlayer(players[ConsolePlayer].mo);
        pinfo = players[ConsolePlayer];
        UpdateCommonUiVar();
    }

    override void UITick()
    {
        p_info.clear();
        m_info.clear();
        p_info_tag.clear();
        m_info_tag.clear();
        Harpoon hpoon = Harpoon(EventHandler.Find("Harpoon"));
        AddPInfoItem(String.Format("Mouse Position : %f | %f | %f", hpoon.diff.x, hpoon.diff.y, hpoon.diff.z), "player_info_pos");  
    }

    override void RenderOverlay (RenderEvent event) 
    {
        DrawDebugInfoItem("\cdPlayerinfo(Playernumber = "..ConsolePlayer..")", CONST_TEXT_GAP_FROM_LOG);

        for(int i = 0; i < p_info.size(); i++)
        {
            DrawDebugInfoItem(p_info[i], (CONST_TEXT_H * 2) + i * CONST_TEXT_H + CONST_TEXT_GAP_FROM_LOG);
        }

        int miscgap = (p_info.size() + 3) * CONST_TEXT_H + CONST_TEXT_GAP_FROM_LOG;

        DrawDebugInfoItem("\cvMisc debug informations", miscgap); 

        for(int i = 0; i < m_info.size(); i++)
        {
            DrawDebugInfoItem(m_info[i], miscgap + (CONST_TEXT_H * 2) + i * CONST_TEXT_H);
        }
    }

    override void InterfaceProcess(ConsoleEvent e)
    {
        if(e.name.IndexOf("AddMInfoItem") >= 0)
        {
            Array<string> arg;
            e.name.Split(arg, "$");

            if(m_info_tag.FInd(arg[2]) != m_info_tag.Size())
            {
                return;
            }

            m_info.push(arg[1]);
            if(arg[2] != "" && m_info_tag.Find(arg[2]) == m_info_tag.Size())
            {
                m_info_tag.push(arg[2]);  
            }
            else
                m_info_tag.push(arg[1]);  

            return;
        }       
    }

    //////////////////////////////////////////////
    ////// PUBLIC Methods
    /////////////////////////////////////////////

    //stolen from fused XDDDDDDDDDDD
    clearscope string LogSeverity(int severity)
    {
        //1 == DEBUG
        //2 == ERROR
        //3 == WARNING
        if(severity > 3 || severity < 1)
        {
            LogError("invalid severity "..severity);
        }
        return (severity == 1 ? "\cdDEBUG\c-" : (severity == 2 ? "\cgERROR\c-" : "\ciWARNING\c-"));
    }

    clearscope void LogMessage(string msg, int severity)
    {
        if(Cvar.GetCvar("cl_starcraft_debug", players[ConsolePlayer]).GetBool() == true)
            console.printf(LogSeverity(severity).." : "..msg);
    }

    clearscope void LogDebug(string msg)
    {
        LogMessage(msg, 1);
    }

    clearscope void LogError(string msg)
    {
        LogMessage(msg, 2);
    }

    clearscope void LogWarning(string msg)
    {
        LogMessage(msg, 3);
    }

    clearscope void AddMInfoItem(string msg, string tag = "")
    {
        SendInterfaceEvent(ConsolePlayer, String.format("AddMInfoItem$%s$%s", msg, tag));   
    }

    clearscope void Throw(string msg)
	{
		ThrowAbortException(msg);
	}

    //////////////////////////////////////////////
    ////// Private Methods
    /////////////////////////////////////////////

    //msg : includes message to show
    //y : y coordinate to show the message at. make sure it's between 0 ~ 1080.
    ui private bool DrawDebugInfoItem(string msg, int y)
    {
        if(y < 0 || y > CONST_TEXT_H_DEFAULT)
        {
            LogError("DrawDebugInfoItem : input parameter y("..y..") is inbetween 0~1080.");
            return false;
        }
        Screen.DrawThickLine(0, ScaleYbyResolution(y + CONST_TEXT_H / 2), ScaleXbyResolution(8 * msg.length()), ScaleYbyResolution(y + CONST_TEXT_H / 2), ScaleYbyResolution(CONST_TEXT_H), Font.CR_BLACK, 125);
        Screen.DrawText(consolefont, Font.CR_WHITE, 0, ScaleYbyResolution(y), msg, DTA_ScaleX, ScaleXbyResolution(0.25), DTA_ScaleY, ScaleYbyResolution(0.25));
        return true;
    }

    ui private void AddPInfoItem(string msg, string tag = "")
    {
        P_info.push(msg);
        if(tag)
            p_info_tag.push(tag);
        else
            p_info_tag.push(msg);    
    }
}