/*	kd:
	
	This allows shooting where your cursor is aimed. Keep in mind this
	will cause a desync in multiplayer.
	
	You can fix this by restricting the cursor to a certain fov value, like 90Â°
	which would be the 4:3 box in the screen centre (assuming you didn't zoom
	or anything).
	
	*/

class FreeAim : EventHandler {
	const turn_bound = 0.400;
	
	protected vector2				cursor_pos;
	protected vector2				resolution;
	protected vector2				window_resolution;
	protected vector2				cursor_tl;
	protected vector2				cursor_br;
	protected TextureId				sprite_cursor;
	
	protected vector2				angle;
	protected double				min_vang;
	protected double				max_vang;
	
	protected Le_ProjScreen			proj;
	protected Le_GlScreen			gl_proj;
	protected Le_SwScreen			sw_proj;
	
	protected transient Cvar		cvar_renderer;
	protected bool					can_project;
	
	protected ShowBox				hitbox_view;
	protected Actor					cursor_mo;
	protected vector3				diff;
	
	vector3 CursorDirection () const {
		return diff;
	}
	
	override void WorldTick () {
		PlayerInfo player	= players [consoleplayer];
		let po				= PlayerPawn(player.mo);
		
		if(!po) {
			return;
		}
		
		// kd: Sprite size should remain the same on all resolutions, so...
		window_resolution	= (Screen.GetWidth(), Screen.GetHeight());
		let window_aspect	= 1.0 * Screen.GetWidth() / max(1, Screen.GetHeight());
		resolution			= 720 * (window_aspect, 1);
		
		// kd: Till I figure out this ui data clearscope whatever mess.
		cursor_tl = (0, 0);
		cursor_br = window_resolution;
		
		HandleTurning(player, po);
		
		// kd: Prepare for some deprojections. We'll at least find out if there
		// is something under the cursor.
		PrepareProjection();
		
		if(!proj) {
			return;
		}
		
		proj.CacheCustomResolution(window_resolution);
		proj.CacheFov(player.fov);
		proj.OrientForPlayer(player);
		proj.BeginDeprojection();
		diff = proj.DeprojectScreenToDiff(cursor_pos);
		
		// kd: Find something under the cursor, maybe. Tell everybody who is
		// interested.
		FlineTraceData data;
		
		// kd: Note diff isn't necessarily a unit vector. If you look straight
		// up, it is squished by pixel stretch...
		let cursor_ang	=  VectorAngle(diff.x, diff.y);
		let cursor_vang	= -VectorAngle(diff.xy.length(), diff.z);
		
		po.LineTrace(
			cursor_ang,
			25000.13376669,
			cursor_vang,
			TRF_THRUBLOCK | TRF_THRUHITSCAN,
			offsetz: player.viewheight,
			data: data);
		
		cursor_mo = data.hitactor;
		
		if(hitbox_view) {
			hitbox_view.SetTarget(cursor_mo);
		}
	}
	
	// kd: Same deal with the hitbox viewer to handle either render mode.
	override void OnRegister () {
		sprite_cursor	= TexMan.CheckForTexture("misla5", TexMan.type_any);
		gl_proj			= new("Le_GlScreen");
		sw_proj			= new("Le_SwScreen");
		cvar_renderer	= Cvar.GetCvar("vid_rendermode", players [consoleplayer]);
		PrepareProjection();
	}
	
	protected void PrepareProjection () {
		if(cvar_renderer)
		switch(cvar_renderer.GetInt()) {
		default:
			proj		= gl_proj;
			min_vang	= -90;
			max_vang	= 90;
			break;
		case 0:
		case 1:
			proj		= sw_proj;
			min_vang	= -56;
			max_vang	= 56;
			break;
		}
		
		else {
			proj = gl_proj;
		}
		
		can_project	= proj != NULL;
	}
	
	override void PlayerEntered (PlayerEvent event) {
		cursor_mo	= NULL;
		hitbox_view	= ShowBox(hitbox_view.Find("ShowBox"));
		
		// kd: Before anything else we wanna freeze the player's angles.
		PlayerInfo player	= players [consoleplayer];
		let po				= PlayerPawn(player.mo);
		
		if(po) {
			angle = (po.angle, po.pitch);
		}
		
		// kd: Just make sure we got that important info...
		WorldTick();
		cursor_pos = 0.5 * (cursor_tl + cursor_br);
	}
	
	protected void HandleTurning (PlayerInfo player, PlayerPawn po) {
		// kd: Bounds in which we don't turn.
		let top_left		= turn_bound * (720, 720);
		let bottom_right	= window_resolution - top_left;
		
		// kd: Look around. Turning is faster towards the window edges.
		let aim_speed	= (4.666, 2.666);
		let aim_offset	= (0, 0);
		
		if(cursor_pos.x		< top_left.x) {
			aim_offset.x = aim_speed.x * (1 - cursor_pos.x / top_left.x);
		}
		
		if(bottom_right.x	< cursor_pos.x)	{
			aim_offset.x = -aim_speed.x * (cursor_pos.x - bottom_right.x) / top_left.x;
		}
		
		if(cursor_pos.y		< top_left.y) {
			aim_offset.y = -aim_speed.y * (1 - cursor_pos.y / top_left.y);
		}
		
		if(bottom_right.y	< cursor_pos.y)	{
			aim_offset.y = aim_speed.y * (cursor_pos.y - bottom_right.y) / top_left.y;
		}
		
		// kd: Don't turn if you hold use.
		if(player.original_cmd.buttons & BT_USE) {
			aim_offset = (0, 0);
		}
		
		angle = (
			angle.x + aim_offset.x,
			clamp(angle.y + aim_offset.y, min_vang, max_vang));
		
		po.A_SetAngle(angle.x, SPF_INTERPOLATE);
		po.A_SetPitch(angle.y, SPF_INTERPOLATE);
	}
	
	// kd: Moves the mouse cursor.
	override bool InputProcess (InputEvent event) {
		
		// kd: I dunno why zs won't let me set cursor_pos directly.
		cursor_pos.x = clamp(
			cursor_pos.x + event.mousex,
			cursor_tl.x,
			cursor_br.x);
		cursor_pos.y = clamp(
			cursor_pos.y - 2.0 * event.mousey,
			cursor_tl.y,
			cursor_br.y);
		return false;
	}
	
	override void RenderOverlay (RenderEvent event) {
		let window_to_screen	= (
			resolution.x / window_resolution.x,
			resolution.y / window_resolution.y);
		
		let cursor_pos = (
			window_to_screen.x * cursor_pos.x,
			window_to_screen.y * cursor_pos.y);
		
		Screen.DrawTexture(
			sprite_cursor,
			true,
			cursor_pos.x,
			cursor_pos.y,
			DTA_KEEPRATIO,		true,
			DTA_VIRTUALWIDTHF,	resolution.x,
			DTA_VIRTUALHEIGHTF,	resolution.y);
	}
}